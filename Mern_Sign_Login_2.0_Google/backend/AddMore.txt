Npm package :::::::::::: <><><><><><><>------------------->>

    "bcryptjs": "^2.4.3",
    "cookie-parser": "^1.4.6",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "express-rate-limit": "^7.4.1",
    "express-session": "^1.18.1",
    "jsonwebtoken": "^9.0.2",
    "mongodb": "^6.8.0",
    "mongoose": "^8.5.0",
    "morgan": "^1.10.0",
    "passport": "^0.7.0",
    "passport-google-oauth2": "^0.2.0",
    "passport-google-oauth20": "^2.0.0",
    "shortid": "^2.2.16",
    "zod": "^3.23.8"
     "mongodb-memory-server": "^10.1.2",
    "morgan": "^1.10.0",
    "prom-client": "^15.1.3",
    "response-time": "^2.3.3"
    "cookie-parser": "^1.4.7",
    "helmet": "^7.1.0",
    "prom-client": "^15.1.2",
    "response-time": "^2.3.2",
    "shortid": "^2.2.16",
    "winston": "^3.13.0",
    "winston-loki": "^6.1.2"
    "express-status-monitor": "^1.3.4",
      "node-statsd": "^0.1.1",

    PM2



000:::: My Mern Stack Functionality all ::::::: <><><><> --------------->><><><><>

..::forget  password

..::Google Login

..::From and login

..::Jwt Token

..::Rate Limit

..::Helmet

..::Logout

..::cors

..::Docker

..::GitHub

..::Nginx

..::JWT blacklisting

..::session

..::router

..::Schema

..::localStorage

..::Monitoring

..::Rest api

..::node-cache

..::Pm2

..::cookieParser

..::keysecret 

..::cluster 

..::LoadBalance

..::app.use(require('express-status-monitor')())

..:: Admin user get

::::::::::::  Rest Api  :::::::::::::::::::::

..::Post

..::Get 

.. pATCH 

..::Put 

..::Delete 






1. User Role Management .........::::::::::::

Functionality: Assign different roles to users (e.g., admin, user, guest). Based on the role, restrict access to certain pages or functionalities.
Usage: An admin might have access to a dashboard, while a regular
 user may only view general content.

2. Remember Me Feature
Functionality: Implement a "Remember Me" option that keeps users logged in even after closing the browser.
Usage: Store the token in cookies or local storage and use it for
 persistent sessions.


3. Forgot Password
Functionality: Allow users to reset their password via email if they
 forget it. This typically involves generating a unique token and
  sending it to the user's email.

Usage: Users click "Forgot Password," enter their email, and receive a reset link to create a new password.


4. Login Rate Limiting
Functionality: Protect the login endpoint from brute force attacks by limiting the number of login
 attempts within a certain time frame.

Usage: Implement rate-limiting middleware that blocks the IP after several failed attempts in a short period.


5. Two-Factor Authentication (2FA)
Functionality: Add an extra layer of security by requiring a second form of authentication, 
such as an OTP (One Time Password) sent via email or SMS.

Usage: After entering the password, users must provide an OTP to complete the login process.


6. Social Media Login Integration
Functionality: Allow users to sign in using social media accounts like Google, Facebook, 
or GitHub, using OAuth protocols.

Usage: Users can click on a "Login with Google" button and authenticate through their Google account.


7. Account Locking After Failed Attempts
Functionality: Lock the user account after a certain number of failed login attempts to prevent further attempts.
Usage: Notify users via email when their account gets locked and provide a way to unlock it.


8. Session Timeout
Functionality: Automatically log users out after a period of inactivity for better security.
Usage: Set a timer for inactivity, and log the user out when that timer expires.


9. Login Logs and Notifications
Functionality: Keep track of login attempts, and notify users when a login occurs from a new device or location.
Usage: Send an email notification to users whenever a login occurs from an unrecognized device.

10. Captcha Integration
Functionality: Add a captcha (e.g., Google reCAPTCHA) to prevent bots from attempting automated logins.
Usage: Users must solve the captcha before proceeding with the login.



Example Scenarios:
If email is invalid: The user will see a 400 Bad Request: Invalid email format error.
If password is too short: The user will see a 400 Bad Request: Password too short error.
If email already exists: A 422 Unprocessable Entity error will be returned.
For unexpected issues: A 500 Internal Server Error message will be shown.